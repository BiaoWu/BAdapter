/*
 * Copyright (C) 2016 BiaoWu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = GROUP
version = VERSION_NAME

def getBintrayUser() {
  return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
}

def getBintrayApiKey() {
  return hasProperty('BINTRAY_API_KEY') ? BINTRAY_API_KEY : ""
}

def getBinTrayGpgPassphrase() {
  return hasProperty('BINTRAY_GPG_PASSPHRASE') ? BINTRAY_GPG_PASSPHRASE : ""
}

//bintray configuration
bintray {
  user = getBintrayUser()
  key = getBintrayApiKey()
  configurations = ['archives'] //When uploading configuration files

  pkg {
    userOrg = hasProperty('BINTRAY_USER_ORG') ? BINTRAY_USER_ORG : getBintrayUser()
    //for example: 'generic', 'maven' etc
    repo = BINTRAY_REPO
    //project name
    name = POM_NAME
    //project description
    desc = POM_DESCRIPTION
    websiteUrl = POM_URL
    issueTrackerUrl = BINTRAY_ISSUE_URL
    vcsUrl = BINTRAY_VCS_URL
    licenses = BINTRAY_LICENSES
    labels = BINTRAY_LABELS
    publish = true
    publicDownloadNumbers = true

    version {
      name = VERSION_NAME
      //Version description
      desc = BINTRAY_VERSION_DESC
      released = new Date()
      vcsTag = hasProperty('BINTRAY_VCS_TAG') ? BINTRAY_VCS_TAG : VERSION_NAME
      attributes = hasProperty('BINTRAY_ATTRIBUTES') ? BINTRAY_ATTRIBUTES : [:]
      gpg {
        sign = true //Determines whether to GPG sign the files. The default is false
        passphrase = getBinTrayGpgPassphrase()
        //Optional. The passphrase for GPG signing'
      }
    }
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
    hasPlugin('com.android.library')) {
  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
  }
} else {
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }
}

artifacts {
  if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
      hasPlugin('com.android.library')) {
    archives androidSourcesJar
    archives androidJavadocsJar
  } else {
    archives sourcesJar
    archives javadocJar
  }
}

install {
  repositories.mavenInstaller {
    pom.groupId = GROUP
    pom.artifactId = POM_ARTIFACT_ID
    pom.version = VERSION_NAME

    pom.project {
      name POM_NAME
      packaging POM_PACKAGING
      description POM_DESCRIPTION
      url POM_URL

      scm {
        url POM_SCM_URL
        connection POM_SCM_CONNECTION
        developerConnection POM_SCM_DEV_CONNECTION
      }

      licenses {
        license {
          name POM_LICENCE_NAME
          url POM_LICENCE_URL
          distribution POM_LICENCE_DIST
        }
      }

      developers {
        developer {
          id POM_DEVELOPER_ID
          name POM_DEVELOPER_NAME
          email POM_DEVELOPER_EMAIL
        }
      }
    }
  }
}